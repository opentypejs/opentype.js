#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var opentype = require('../opentype.js')

// Print out information about the font on the console.
function printFontInfo(font) {
    console.log('  glyphs:', font.numGlyphs, font.glyphs.length);
    console.log('  kerning pairs:', Object.keys(font.kerningPairs).length);
}

// Recursively walk a directory and execute the function for every file.
function walk(dir, fn) {
    var files, i, file;
    files = fs.readdirSync(dir);
    for (i = 0; i < files.length; i += 1) {
        file = files[i];
        var fullName = path.join(dir, file);
        var stat = fs.statSync(fullName);
        if (stat.isFile()) {
            fn(fullName);
        } else if (stat.isDirectory()) {
            walk(fullName, fn);
        }
    }
}

// Print out usage information.
function printUsage() {
  console.log('Usage: ot command [dir]');
  console.log();
  console.log('Commands:');
  console.log();
  console.log('  info    Get information of fonts in the specified directory.');
  console.log();
}

function recursiveInfo(fontDirectory) {
    walk(fontDirectory, function (file) {
        var ext = path.extname(file).toLowerCase();
        if (ext === '.ttf' || ext === '.otf') {
            console.log(path.basename(file));
            opentype.load(file, function (err, font) {
                if (err) {
                    console.log('  (Error: ' + error + ')');
                } else if (!font.supported) {
                    console.log('  (Unsupported)');
                } else {
                    printFontInfo(font);
                }
            });
        }
    });
}

if (process.argv.length < 3) {
    printUsage();
} else {
    var command = process.argv[2];
    if (command === 'info') {
        var dir = process.argv.length === 3 ? '.' : process.argv[3];
        recursiveInfo(dir);
    } else {
        printUsage();
    }
}

